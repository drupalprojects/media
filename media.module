<?php
// $Id$

/**
 *  @file
 *  A GUI for file management for upload forms.
 *  The Media module provides a drop-in replacement for Drupal's Upload,
 *  FileField, Embedded Media Field, and other similar forms. It offers an API
 *  and hooks available for other modules to implement, allowing for customized
 *  file lists, tabs, drawers, and forms to the new Upload form.
 */

/* ***************************************** */
/* DEFINITIONS                               */
/* ***************************************** */

define('MEDIA_RESOURCE_URI_DEFAULT', 'public://');
define('MEDIA_TYPES_DEFAULT', '*');

/* ***************************************** */
/* DRUPAL API FUNCTIONS                      */
/* ***************************************** */


/**
 * Implementation of hook_menu().
 *
 */
function media_menu() {
  // ajax formatter
  $items['media/ahah'] = array(
    'page callback' => 'media_ahah_formatter_load',
    'access arguments' => array('access content'),
    'file' => 'media_ahah.inc',
  );

  // media configuration per content type
  $items['admin/content/media'] = array(
    'title' => 'Media',
    'description' => 'Configure your site\'s Media settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_admin_settings'),
    'access arguments' => array('administer media'),
    'file' => 'media_admin.inc',
  );

  // build pages for each content type
  $content_types = node_get_types();
  if ($content_types) {
    foreach ($content_types as $content_type) {
      $items['admin/content/media/'. $content_type->type] = array(
        'title' => $content_type->name,
        'description' => 'Configure Media settings for '. $content_type->name,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('media_admin_settings', $content_type->type),
        'access arguments' => array('administer media'),
        'file' => 'media_admin.inc',
      );
    }
  }

  return $items;
}


/**
 * Implementation of hook_form_alter().
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 */
function media_form_alter (&$form, $form_state, $form_id) {
  global $user;

  // Add the media browser on the node add/edit screen.
  if (strstr($form_id, 'node_form') ) {
    // Is the media browser enabled on this node type?
    if (variable_get('media_'. $form['type']['#value'] .'_enabled', NULL)) {
      // Get the fields we need to enable on this module.
      $fields = media_active_fields_for_node_type($form['type']['#value']);
      foreach ($fields as $field => $registration_ids) {
        $form[$field]['media'] = media_build_browser($registration_ids, $form['type']['#value'], $field, $user->uid);
        $form[$field][0]['#attributes'] = array('class' => 'media replace');
      }
    }
  }
}


/**
 * Implements hook_theme().
 * Register theming functions
 * @return array
 */
function media_theme() {
  return array(
    'media_file_browser' => array(
      'file' => 'media_theme.inc',
      'arguments' => array('element' => NULL),
    )
  );
}


/* ***************************************** */
/* media hook calls                          */
/* ***************************************** */

/**
 * Gets all of the modules which register with Media.
 * @param array $ids
 *   (Optional) If this contains an array of id strings, then return only the
 *   specified ids.
 * @param boolean $reset
 *   (Optional) If TRUE, then reset the static cache.
 * @return array
 *   An array of registrations, keyed by implementing function name, in the
 *   form of:
 *     'module' => The module implementing the hook.
 *     'uri' => The scheme the stream wrapper handles, default is 'public://'.
 *     'types' => The mime types this module handles, defaults to * (all).
 *     'name' => A human readable name, displayed on forms.
 *     'kind' => Kind of functionality: 'resource' or 'format'.
 *     'description' => A verbose description of functionality.
 *     'callbacks' => An array of key => functions called for data.
 *     'fields' => What fields does this functionality operate on?
 *     'validation' => @todo
 *     'display' => @todo
 */
function media_get_registered_modules($ids = NULL, $reset = FALSE) {
  static $registrations;
  // Only build cache the first time the function is called, or if we reset it.
  if (is_null($registrations) || $reset) {
    $registrations = array();
    // Get all the modules which implement media_register().
    foreach (module_implements('media_register') as $module) {
      $function = $module .'_media_register';
      // Get all the registrations.
      $registration = $function();
      // Add the module name to each registration.
      foreach (array_keys($function()) as $key) {
        $registration[$key]['module'] = $module;
        if (!$registraton[$key]['uri']) {
          $registration[$key]['uri'] = MEDIA_RESOURCE_URI_DEFAULT;
        }
        if (!$registration[$key]['types']) {
          $registration[$key]['types'] = MEDIA_TYPES_DEFAULT;
        }
      }
      $registrations = array_merge($registrations, $registration);
    }
  }
  // Return requested registrations.
  if ($ids) {
    foreach ($ids as $id) {
      $return[$id] = $registrations[$id];
    }
    return $return;
  }
  return $registrations;
}


/**
 * Generic hook call for media.
 * @TODO Document this function more. What is it for?
 *
 * @param string $hook
 *   hook name
 * @return array
 */
function media_extend($hook) {
  $data = array();
  // Get a list of the modules that implement this hook.
  foreach (module_implements($hook) as $module) {
    // Add the data keyed by module name.
    if ($result = module_invoke($module, $hook)) {
      $data[$module] = $result;
    }
  }
  if (count($data)) {
    return $data;
  }
}


/* ***************************************** */
/* Media API Functions                       */
/* ***************************************** */

/**
 * Build a list of possible registration types.
 *
 * @return array
 */
function media_registration_kinds() {
  return array('resource', 'formatter');
}



/**
 * Get all fields that can be enabled on a field type.
 * @param string $type
 *   The field type to get items for.
 * @param string $function_type
 *   The kind of functionality being looked for.
 * @return array
 *   Array of full registration objects.
 */
function media_get_fields($field_type, $function_type = 'resource') {
  static $data;

  // Do we have cached version?
  if ($data[$field_type][$function_type]) {
    return $data[$field_type][$function_type];
  }

  $data = array();
  // Get all the registered modules.
  foreach (media_get_registered_modules() as $id => $registration) {
    // Check to see if this registration supports this function type.
    if ($registration['kind'] == $function_type) {
      // Now look for the fields.
      if ($registration['fields']) {
        foreach ($registration['fields'] as $field) {
          // If this registration supports this field type, add it to the
          // returned array.
          if ($field == $field_type) {
            $data[$field_type][$function_type][$id] = $registration;
          }
        }
      }
    }
  }
  return $data[$field_type][$function_type];
}


/**
 * Select registrations for use by matching against uri and file extension.
 *
 * @param array $registrations
 *   Array of extensions.
 * @param string $uri
 *   The kind of uri being used.
 * @param string $file_extension
 *   The current file extension.
 * @return array
 *   An array of applicable formatters.
 */
function media_get_applicable_formatters($registrations, $file_extension) {
  // Do we have a file extension?
  if ($file_extension) {
    foreach ($registrations as $id => $formatter) {
      // Does this formatter use any file type? If not, then we have to dig.
      if (!$registration['types'] == MEDIA_TYPES_DEFAULT) {
        // We need to see if this file type is supported specifically.
        if (!in_array($file_extension, $registration['types'])) {
          // This registration is not useful.
          unset($registrations[$id]);
        }
      }
    }
  }
  return $registrations;
}


/* ***************************************** */
/* Media Internal Functions                  */
/* ***************************************** */

/**
 * Parsing function for the registrations to hand back the kinds of modules
 * registering. Used to select all formatters, resources, etc.
 * @param string $kinds
 *   Return all the matching registrations of this kind.
 * @return array
 *   An array of matching registrations.
 */
function media_get_registration_kinds($kind = NULL) {
  $kinds = array();
  // Get the registered modules.
  $registrations = media_get_registered_modules();
  // Parse the registrations.
  foreach ($registrations as $id => $registration) {
    if ($kind) {
      // Get the kind that is being looked for.
      if ($registration['kind'][$kind]) {
        $kinds[$id] = $registration;
      }
    }
    else {
       $kinds[$id] = $registration;
    }
  }
  return $kinds;
}


/**
 * Returns a set of formatters which can format the specified item. If
 * $description is NULL, all formatters will be returned. If a set of
 * registered modules can be passed in to narrow the formatter options.
 * @param string $description
 *   File extension to return.
 * @param array $registrations
 *   (Optional) If specified, then match only against these registrations.
 * @return array
 *   An array of formatter ids keyed by module.
 */
function media_registration_item_formatters($description = '*', $registrations = NULL) {
  $formatters = array();
  // Get all the registrations if we don't have any.
  if (is_null($registrations)) {
    $registrations = media_get_registered_modules();
  }
  // Iterate through each of the registered modules and find the formatters.
  foreach ($registrations as  $id => $registration) {
    // look for the formatter, or just take all
    if ((is_array($registration['kind']['formatter']['types']) && in_array($registration['kind']['formatter']['types'], $description))
      || $description == '*'
      || $registration['kind']['formatter']['types'] == '*') {
      $formatters[$registration['module']] = $id;
    }
  }
  return $formatters;
}


/**
 * Parsing function for the registrations to hand back the kinds of modules
 * registering.
 * @param string $type
 *   Only hand back data for the specified type.
 * @return array
 * @TODO: finish this function.
 */
function media_registration_types($type = NULL) {
  // get the registered modules
  $registrations = media_get_registered_modules();
  // parse the registrations
  foreach ($registrations as $registration) {
    // @TODO
  }
}



/**
 * Parsing function for the registrations to hand back the kinds of modules
 * registering.
 * @param string $array
 *   Name of the element we want to get data from.
 * @return array
 */
function media_registration_data($name) {
  $data = array();
  // Get the registered modules.
  $registrations = media_get_registered_modules();
  // Parse the registrations.
  foreach ($registrations as $id => $registration) {
    // Do we have this data in this registration?
    if ($registration[$name]) {
      // Get the item that was requested.
      $data[$registration['module']] = array(
        $id => array(
          $name => $registration[$name],
          'description' => $registration['description']
        )
      );
    }
  }
  return $data;
}


/**
 * Fetches all resources registered in $resources.
 * @TODO Implement admin weighting here somehow.
 * @param array $registration_ids
 *   Array of registration ids to be loaded.
 * @param string $node_type
 *   Drupal node type.
 * @param field $field
 *   CCK field name.
 * @param int $uid
 *   Drupal {user} id.
 * @return array
 */
function media_get_resources($registration_ids, $node_type, $field, $uid) {
  // Get all the registrations that define the resources.
  $registrations = media_get_registered_modules($registration_ids);
  foreach ($registrations as $id => $registration) {
    // Get the callback function.
    $function = $registration['callbacks']['resource'];
    if (function_exists($function)) {
      // Get the results of the callback function.
      $item = $function($node_type, $field, $uid);
      $tab_name = key($item);
      // Add a resource_id to the item.
      $item[$tab_name][key($item[$tab_name])]['resource_id'] = array(
        '#type' => 'value',
        '#value' => $id,
      );
      // Add tabs under the tab name.
      $items[$tab_name][key($item[$tab_name])] = $item[$tab_name][key($item[$tab_name])];
    }
  }
  return $items;
}


/**
 * Get a list of fields for the requested node type.
 *
 * @param string $type
 *   Drupal {node} type.
 * @param string $function
 *   Either 'resource' or 'formatter'.
 * @return array
 *   An array of field names.
 */
function media_active_fields_for_node_type($type, $function = 'resource') {
  $items = variable_get('media_'. $type .'_'. $function, array());
  $data = array();
  foreach ($items as $id => $item) {
    // we need to split the $id into $field_name and $media registration id
    if ($item) {
      $id = explode('--', $id);
      $data[$id[0]][] = $id[1];
    }    
  }
  return $data;
}


/**
 * Sanitize the incoming name to be used for a html #id.
 *
 * @param string $drawer_name
 * @return string
 */
function media_create_id($drawer_name) {
  return str_replace(array(' ', "'", '"', "%", "<", ">"), '', $drawer_name);
}

/* *************************************************** */
/* Media forms                                         */
/* *************************************************** */

/**
 * Build data for the media browser display.
 * @TODO Clean this form up and use a form theme function.
 * @param array $registration_ids
 *   Array of registrations to call.
 * @param string $node_type
 * @param string $field
 * @param uid $uid
 * @return array
 *   Drupal FAPI form array.
 */
function media_build_browser($registration_ids, $node_type, $field, $uid) {
  $items = array();
  $form = array();

  // Get all the resources arrays from the registration ids.
  $resources = media_get_resources($registration_ids, $node_type, $field, $uid);
  // Now we order modules into tabs structure.
  // @TODO clean this crap up!
  // Split the tabs into sets of drawers.
  foreach ($resources as $tab_name => $drawer_items) {
    $first = TRUE;
    $drawers = array();
    // Now create the sub element (drawer).
    foreach ($drawer_items as $drawer_name => $form ) {
      // Strip out any scary stuff so we can make an id.
      $drawer_id = media_create_id($drawer_name);
      // Create the drawer entry.
      $drawers[] = '<a onclick="javascript: return FALSE;" href="#'. $drawer_id .'">'. $drawer_name .'</a>';
      // Add an AHAH add buton on each item.
      $form[$drawer_id]['form']['add'] = array(
        '#type' => 'button',
        '#attributes' => array('class' => 'resource add'),
        '#value' => t('Add'),
        '#ahah' => array(
          'event' => 'click',
          'path' => 'media/ahah/'. $form['resource_id']['#value'] .'/'. $node_type .'/'. $field,
          'wrapper' => $drawer_id .'_add',
          'method' => 'replace',
        ),
        '#suffix' => '<div id="'. $drawer_id .'_add"></div>',
      );
      $my_files_elements[$tab_name][$drawer_id] = array(
        '#type' => 'markup',
        '#value' => '',
        '#prefix' => '<div class="media browser display '. ($first ? 'first': '') .'" id="'. $drawer_id .'"><a name="'. $drawer_id .'"/>',
        '#suffix' => '</div>',
        'resource_form' => $form,
      );
      $first = FALSE;
    }
    // Now add the drawers onto the tab and make it render first.
    $my_files_elements[$tab_name]['drawers']['#value'] = '<div class="drawers">'. theme('item_list', $drawers) .'</div>';
    $my_files_elements[$tab_name]['drawers']['#weight'] = -9;
  }
  return media_tabs_form($my_files_elements);
}


/**
 * Wrapper to build the media tabs.
 * @TODO Make this a cleaner form function that uses a theme function.
 * @param array $forms
 *   Array of forms to be tabbed.
 * @return array
 */
function media_tabs_form($forms) {
  // @TODO We currently depend on tabs module for this.
  // Load our css.
  drupal_add_css(drupal_get_path('module', 'media') .'/media.css');
  // Load our js.
  drupal_add_js(drupal_get_path('module', 'media') .'/media.js');

  $form = array();
  // Build the activator for the media browser.
  $form['media_browser_activate'] = array(
    '#type' => 'markup',
    '#value' => '<div class="media browser activation">'. t('Add files') .'</div>',
  );
  $form['media_tabs'] = array(
    '#type' => 'tabset',
    '#attributes' => array('class' => 'media browser clearfix'),
  );
  foreach ($forms as $tab_name => $form_data) {
    // Get the current resource id value.
    $resource_id = $form_data[key($form_data)]['resource_form']['resource_id']['#value'];
    // Build the tab container.
    $form['media_tabs'][media_create_id('tab_'. $tab_name)] = array(
      '#type' => 'tabpage',
      '#title' => $tab_name,
      $resource_id => $form_data,
      '#suffix' => '<br class="clear" />',
    );
  }
  return $form;
}


/**
 * Display files in a form element. Default for other modules to make use of.
 * @param array $files
 *   array of (uri => uri, filename => filename, meta => array(key => value))
 * @param string $title
 *   option title argument
 * @return string
 */
function media_resource_display_user_files_form($files, $title = NULL) {
  // Pass files into options array.
  $options = array();
  foreach ($files as $file) {
    $options[$file['uri']] = $file['filename'];
  }
  // Parse files into form element.
  $form['media_files'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => $title ? $title : '',
    '#size' => 10,
    '#attributes' => array('class' => 'resource select'),
  );
  return $form;
}


/**
 * Display the upload form for the tab.
 * @return string
 */
function media_resource_display_upload_form() {
  $form['media_upload']['upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload your file'),
    '#size' => 30,
    '#attributes' => array('class' => 'resource select'),
   );
   return $form;
}



/* ***************************************** */
/* Media Hook Implementations                */
/* ***************************************** */


/**
 * Implementation of hook_media_register().
 * @return array
 *
 */
function media_media_register() {
  $registration = array(
    'media_user_files' => array(
      // Human readable name.
      'name' => t('User files'),
      'uri' => 'file',
      'kind' => 'resource',
      'types' => '*',
      'description' => t('Format Drupal uploaded files.'),
      'callbacks' => array(
        'resource' => 'media_display_user_files',
       ),
       // Human readable description.
      'description' => t('Displays all of current user\'s files.'),
      'fields' => array('attachments', 'filefield'),
    )
  );
  return $registration;
}


/**
 * Implementation of hook_media_user_files_select().
 *
 * @param string $node_type
 * @param string $field
 * @param int $uid
 */
function media_display_user_files($node_type, $field, $uid) {
  $files = array();
  $results = db_query('SELECT filepath, filename FROM {files} WHERE uid = %d', $uid);
  while ($file = db_fetch_array($results)) {
    $files[] = array(
      'uri' => $file['filepath'],
      'filename' => $file['filename'],
      'meta' => '',
    );
  }
  $return = array(
    t('My files') => array(
      t('Local') => media_resource_display_user_files_form($files, t('Your files')),
    )
  );
  return $return;
}
