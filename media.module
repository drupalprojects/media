<?php

// $Id$


/* ***************************************** */
/* DRUPAL API FUNCTIONS                      */
/* ***************************************** */


/**
 * Implementation of hook_menu.
 * 
 */
function media_menu() {
  // ajax formatter 
  $items['media/ajax'] = array(
    'title' => 'media Ajax',
    'page callback' => 'media_ajax_formatter_load',
    'access arguments' => array('access content'),
    'file' => 'media_ajax.inc',
  );
  
  // media configuration per content type
  $items['admin/content/media'] = array(
    'title' => 'Media',
    'description' => 'Configure your site\'s Media settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_admin_settings'),
    'access arguments' => array('administer media'),
    'file' => 'media_admin.inc',
  );
  
  return $items;
}


/**
 * Implementation of hook_form_alter
 * @param $form
 * @param $form_state
 * @param $form_id
 * 
 */
function media_form_alter (&$form, $form_state, $form_id) {
  global $user;
  
  // add the media browser on the node add/edit screen
  if (strstr($form_id, 'node_form') ) {
    // is the media browser enabled on this node type?
    if (variable_get('media_'. $form['type']['#value'] .'_enabled', null)) {    
      // display the media browser form
      $form['test'] = media_get_user_file_options('', '', $user->uid);   
      $form['test']['#weight'] = -9;
    }    
  }
}


/**
 * Register theming functions
 * @return array
 */
function media_theme() {
  return array(
    'media_no_tabs_display' => array(
      'file' => 'media_theme.inc',
      'arguments' => array(
        'tabs' => NULL,
      ),
    ),
    'media_file_browser' => array(
      'file' => 'media_theme.inc',
      'arguments' => array('element' => null),
    )
  );
}


/* ***************************************** */
/* media hook calls                          */
/* ***************************************** */

/**
 * Gets all of the modules which register with ReMiG
 */
function media_get_registered_modules() {
  static $registrations;
  if (! $registrations) {
    $registrations = array();
    // get all the modules which implement 
    foreach (module_implements('media_register') as $module) {
      $function = $module .'_media_register';
      // get all the registrations
      $registration = $function();
      // add the module name to each registration
      foreach (array_keys($function()) as $key) {
        $registration[$key]['module'] = $module;
      }
      $registrations = array_merge($registrations, $registration); 
    }
  }
  return $registrations;  
}


/**
 * Get all module data that uses the "media_user_files_select" hook
 * @TODO clean this form up and use a form theme function
 * @param string $node_type
 * @param string $field
 * @param uid $uid
 * @return array
 *   drupal form array
 */
function media_get_user_file_options($node_type, $field, $uid) {
  $items = array();
  $form = array();
  // get all the modules which implement file select options
  foreach (module_implements('media_user_files_select') as $module) {
    $function = $module .'_media_user_files_select';
    $items = array_merge($items, $function($node_type, $field, $uid));
  }

  // now we order modules into tabs structure
  // @TODO implement admin weighting here some how
  foreach ($items as $tab_name => $item) {
    $drawers = array();
    $first = true;
    // now create the sub element (drawer)    
    foreach($item as $drawer_name => $data ) {
      // strip out any scary stuff so we can make an id
      $drawer_id = str_replace(array(' ', "'", '"', "%", "<", ">"), '', $drawer_name);
      // create all the drawers
      $drawers[] =  '<a onclick="javascript: false;" href="#'. $drawer_id .'">'. $drawer_name .'</a>';
      
      // add a add buton on each item
      // @TODO this needs AHAH support
      $item[$drawer_name]['form']['add'] = array(
        '#type' => 'button',
        '#value' => t('Add')
      );
      $my_files_elements[$tab_name][$drawer_name] = array(
        '#type' => 'markup',
        '#value' => '',
        '#prefix' => '<div class="media browser display '. ($first ? 'first': '') .'" id="'. $drawer_id .'"><a name="'. $drawer_id .'"/>',
        '#suffix' => '</div>',
        'content' => $item[$drawer_name]['form'],
      );
      $first = false;
    }
    // now add the drawers onto the tab and make it render first
    $my_files_elements[$tab_name]['drawers']['#value'] = '<div class="drawers">'. theme('item_list', $drawers) .'</div>';
    $my_files_elements[$tab_name]['drawers']['#weight'] = -9;
  }
  return media_tabs_form($my_files_elements);  
}


/**
 * Generic hook call for media
 *
 * @param string $hook
 *   hook name
 * @return array
 */
function media_extend($hook) {
  $data = array();
  // get a list of the modules that implement this hook
  foreach (module_implements($hook) as $module) {
    // add the data keyed by module name
    $data[$module] = module_invoke($module, $hook);
  }
  if (count($data)) {return $data; }
}


/**
 * This handles all the admin hooks that do not
 * require the passing of a file object. This does not use
 * module_invoke_all() so that the array of data can be 
 * keyed by the module name for ease of usage later
 * @param string $hook
 *  name of the hook being called
 * @return array
 *  array of data from each module that implements the hook
 */
function media_admin_extend($hook) {
  $data = array();
  // get a list of the modules that implement this hook
  foreach (module_implements($hook) as $module) {
    // add the data keyed by module name
    $data[$module] = module_invoke($module, $hook);
  }
  if (count($data)) {return $data; }
}


/**
 * This allows admins to to configure specific settings
 * per module for media.
 * @return array
 *   drupal form array
 */
function media_admin_module_options_settings_form() {
  if (! $options = media_admin_extend('media_admin_options_settings')) {
    drupal_set_message(t('Sorry, there are no modules which have configurable settings.'));
    return;
  }
  // build a fieldset per module
  foreach ($options as $module_name => $option) {
    $form[$module_name] = array(
      '#type' => 'fieldset',
      '#title' => $module_name
    );
    $form[$module_name][] = $options;
  }
  return $form;
}


/**
 * This takes all of the modules that implement the media permissions 
 * hook, gets them on a page, and adds a roll setting to control access
 * @return array
 *  drupal form array
 */
function media_admin_module_options_permissions_form() {
  // get any cached permissions for the permisisons 
  $permissions = unserialize(variable_get('media_admin_permissions', array()));
  if (! $options = media_admin_extend('media_admin_permissions_settings', $permissions)) {
    drupal_set_message(t('Sorry, there are no modules which have configurable permissions settings.'));
    return;
  }
  
  // build a fieldset per module
  foreach ($options as $module_name => $option) {
    $form[$module_name] = array(
      '#type' => 'fieldset',
      '#title' => $module_name
    );
    
    // create the roll form item
    $append = array(
      '#type' => 'select',
      '#title' => t('Permissions'),
      '#multiple' => true,
    );
    // now we need to itterate through the incoming form and append 
    // the roll setting to each item
    $form[$module_name] = _media_admin_form_perm_append($option, $append, $permissions['module']);
    
    $form[$module_name][] = $options;
  }
}


/**
 * This is a helper function to add in a permissions element 
 * for each of the options that are access
 * @param array $form
 *   the drupal form array that will have items appended to it
 * @param array $append
 *   the form element that will be appended to the form
 * @param array $permissions
 *   permissions saved for this module
 * @return array
 *   drupal form array
 */
function _media_admin_form_perm_append($form, $append, $permissions) {
  foreach ($form as $type => $element) {
    if ($type = '#title') {
      $form[$element .'_perm'] = $append;
      $form[$element .'_perm']['#default_value'] = $permissions[$element .'_perm'];
    }
    elseif (is_array($element)) {
      $form[$type][] = _media_admin_form_perm_append($element, $append, $permissions);
    }
  }
  return $form;
}

/* ***************************************** */
/* Media API Functions                       */
/* ***************************************** */


/**
 * Get all fields that can be enabled on
 * a field type
 * @param string $type
 *   the field type to get items for
 * @param string $function_type
 *   the kind of functionality being looked for
 * @return array
 *   array of full registration objects
 */
function media_get_fields($field_type, $function_type = 'container') {
  static $data;
  
  // do we have cached version?
  if ($data[$field_type][$function_type]) {
    return $data[$field_type][$function_type];
  }
  
  $data = array();
  // get all the registered modules  
  foreach (media_get_registered_modules() as $id => $registration) {
    // check to see if this registration supports this function type
    if ($registration['kind'][$function_type]) {
      // now look for the fields
      if ($registration['fields']) {
        foreach ($registration['fields'] as $field) {       
          // if this registration supports this field type, add it to the return
          if ($field == $field_type) {
            $data[$field_type][$function_type][$id] = $registration;
          }
        }
      }
    }
  }

  return $data[$field_type][$function_type];
}

function media_get_formaters() {
  
  
}

/* ***************************************** */
/* Media Internal Functions                  */
/* ***************************************** */

/**
 * Parsing function for the registrations to hand back the kinds 
 * of modules registering. Used to select all formatters, containers, etc
 * @param string $kinds
 *   return all the matching registrations of this kind
 * @return array
 */
function media_registration_kinds($kind = null) {
  $kinds = array();
  // get the registered modules
  $registrations = media_get_registered_modules();
  // parse the registrations
  foreach ($registrations as $id => $registration) {
    if ($kind) {
      // get the kind that is being looked for
      if ($registration['kind'][$kind]) {
        $kinds[$id] = $registration;
      } 
    }
    else {
       $kinds[$id] = $registration;
    }
  }
  return $kinds;
}


/**
 * Returns a set of formatters which can format the specified 
 * item. If $description is null, all formatters will be returned. If 
 * a set of registered modules can be passed in to narrow the
 * formatter options. 
 * @param string $description
 *   file extension to return
 * @param unknown_type $registrations
 * @return array
 */
function media_registration_item_formatters($description = '*', $registrations = null) {
  $formatters = array();
  // get all the registrations if we don't have any
  if (! $registrations) {
    $registrations = media_get_registered_modules();
  }
  // itterate through each of the registered modules and find the formatters
  foreach ($registrations as  $id => $registration) {
    // look for the formatter, or just take all
    if ((is_array($registration['kind']['formatter']['types']) && in_array($registration['kind']['formatter']['types'], $description))
      || $description == '*' 
      || $registration['kind']['formatter']['types'] == '*') {
      $formatters[$registration['module']] = $id;
    }
  }
  return $formatters;
}


/**
 * parsing function for the registrations to hand back the kinds 
 * of modules registering
 * @param string $type
 *   only hand back data for the specified type
 * @return array
 */
function media_registration_types($type = null) {
  // get the registered modules
  $registrations = media_get_registered_modules();
  // parse the registrations
  foreach ($registrations as $registration) {
    
  } 
}



/**
 * parsing function for the registrations to hand back the kinds 
 * of modules registering
 * @param string $array
 *   name of the element we want to get data from
 * @return array
 */
function media_registration_data($name) {
  $data = array();
  // get the registered modules
  $registrations = media_get_registered_modules();
  // parse the registrations
  foreach ($registrations as $id => $registration) {
    // Do we have this data in this registration
    if ($registration[$name]) { 
      // get the item that was requested
      $data[$registration['module']] = array(
        $id => array(
          $name => $registration[$name], 
          'description' => $registration['description']
        )
      );
    }
  }
  return $data;
}


/* *************************************************** */
/* Media forms                                         */
/* *************************************************** */

/**
 * Display files in a form element 
 * @param array $files
 *   array of (uri => uri, filename => filename, meta => array(key => value))
 * @param string $title
 *   option title argument
 * @return string
 */
function media_display_user_files_form($files, $title = null) {
  // pase files into options array
  $options = array();
  foreach ($files as $file) {
    $options[$file['uri']] = $file['filename'];
  }
  // parse files into form elemet
  $form['media_files'] = array( 
    '#type' => 'select',
    '#options' => $options,
    '#title' => $title ? $title : '',
    '#size' => 10,
  );
  return $form;
}


/**
 * wrapper to build the media tabs
 * @TODO make this a cleaner form function that uses a theme function
 * @param array $forms
 *   array of forms to be tabbed
 * @return array
 */
function media_tabs_form($forms) {
  if (module_exists('tabs')) {
    // load our css
    drupal_add_css(drupal_get_path('module', 'media') .'/media.css');
    // load our js
    drupal_add_js(drupal_get_path('module', 'media') .'/media.js');
    
    $form = array();  
    $form['media_tabs'] = array(
      '#type' => 'tabset',
      '#attributes' => array('class' => 'media browser clearfix'),
    );
    foreach ($forms as $id => $element) {
      $form['media_tabs']['tab_'. $id] = array(
        '#type' => 'tabpage',
        '#title' => $id,
        'content' => $element,
        '#suffix' => '<br class="clear" />',
      );
    }
  }
  else {
    $form = theme('media_no_tab_display', $tabs);
  }
  return $form;
}

/* ***************************************** */
/* Media Hook Implementations                */
/* ***************************************** */

/**
 * Implementation of hook_media_user_files_select
 *
 * @param string $node_type
 * @param string $field
 * @param int $uid
 */
function media_media_user_files_select($node_type, $field, $uid) {
  $files = array();
  $results = db_query('SELECT filepath, filename FROM {files} WHERE uid = %d', $uid);
  while ($file = db_fetch_array($results)) {
    $files[] = array(
      'uri' => $file['filepath'],
      'filename' => $file['filename'],
      'meta' => '',
    );
  }
  $return = array( 
    t('My files') => array(
      t('Local') => array( 
        'form' => media_display_user_files_form($files, t('Your files')),
      ),
      t('FTP') => array( 
        'form' => array('#value' => 'this would be the FTP files<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />'),
      ),
      t('Yahoo') => array( 
        'form' => array('#value' => 'this would be the yahoo files'),
      )
    )
  );
  return $return;
}
